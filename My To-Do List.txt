import tkinter as tk
from tkinter import ttk, messagebox
import json

class TodoListApp(tk.Tk):
    def __init__(self):
        super().__init__()

        self.title("Todo List App")
        self.geometry("400x400")

        self.style = ttk.Style()
        self.style.theme_use("default")  # Use a default theme
        self.style.configure("Custom.TEntry", foreground="gray")

        self.task_input = ttk.Entry(self, font=("TkDefaultFont", 16), width=30, style="Custom.TEntry")
        self.task_input.pack(pady=10)
        self.task_input.insert(0, "Enter your todo here.....")

        self.task_input.bind("<FocusIn>", self.clear_placeholder)
        self.task_input.bind("<FocusOut>", self.restore_placeholder)

        ttk.Button(self, text="Add", command=self.add_task).pack(pady=5)

        self.task_list = tk.Listbox(self, font=("TkDefaultFont", 16), height=10, selectmode=tk.SINGLE)
        self.task_list.pack(fill=tk.BOTH, expand=True, pady=10)

        self.style.configure("Success.TButton", foreground="green")
        self.style.configure("Danger.TButton", foreground="red")
        self.style.configure("Info.TButton", foreground="blue")

        ttk.Button(self, text="Done", style="Success.TButton", command=self.mark_done).pack(side=tk.LEFT, padx=10, pady=10)
        ttk.Button(self, text="Delete", style="Danger.TButton", command=self.delete_task).pack(side=tk.RIGHT, padx=10, pady=10)
        ttk.Button(self, text="View Stats", style="Info.TButton", command=self.view_stats).pack(side=tk.BOTTOM, pady=10)

        self.load_tasks()

    def view_stats(self):
        done_count = sum(1 for i in range(self.task_list.size()) if self.task_list.itemcget(i, "foreground") == "green")
        total_count = self.task_list.size()
        messagebox.showinfo('Task Statistics', f"Total tasks: {total_count}\nCompleted tasks: {done_count}")

    def add_task(self):
        task = self.task_input.get().strip()
        if task and not self.task_input.get().startswith("Enter"):
            self.task_list.insert(tk.END, task)
            self.task_list.itemconfig(tk.END, foreground="orange")
            self.task_input.delete(0, tk.END)
            self.save_tasks()

    def mark_done(self):
        task_index = self.task_list.curselection()
        if task_index:
            index = task_index[0]
            self.task_list.itemconfig(index, foreground="green")
            self.save_tasks()

    def delete_task(self):
        task_index = self.task_list.curselection()
        if task_index:
            index = task_index[0]
            self.task_list.delete(index)
            self.save_tasks()

    def clear_placeholder(self, event):
        if self.task_input.get() == "Enter your todo here.....":
            self.task_input.delete(0, tk.END)
            self.task_input.config(foreground="black")

    def restore_placeholder(self, event):
        if not self.task_input.get():
            self.task_input.insert(0, "Enter your todo here.....")
            self.task_input.config(foreground="gray")

    def load_tasks(self):
        try:
            with open("tasks.json", "r") as f:
                data = json.load(f)
                for task in data:
                    self.task_list.insert(tk.END, task["text"])
                    self.task_list.itemconfig(tk.END, foreground=task["color"])
        except FileNotFoundError:
            pass

    def save_tasks(self):
        data = [{"text": self.task_list.get(i), "color": self.task_list.itemcget(i, "foreground")}
                for i in range(self.task_list.size())]
        with open("tasks.json", "w") as f:
            json.dump(data, f)

if __name__ == '__main__':
    app = TodoListApp()
    app.mainloop()
